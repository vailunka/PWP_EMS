# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Event(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, location: str=None, time: datetime=None, organizer: int=None, description: str=None, category: object=None, tags: List[str]=None):  # noqa: E501
        """Event - a model defined in Swagger

        :param name: The name of this Event.  # noqa: E501
        :type name: str
        :param location: The location of this Event.  # noqa: E501
        :type location: str
        :param time: The time of this Event.  # noqa: E501
        :type time: datetime
        :param organizer: The organizer of this Event.  # noqa: E501
        :type organizer: int
        :param description: The description of this Event.  # noqa: E501
        :type description: str
        :param category: The category of this Event.  # noqa: E501
        :type category: object
        :param tags: The tags of this Event.  # noqa: E501
        :type tags: List[str]
        """
        self.swagger_types = {
            'name': str,
            'location': str,
            'time': datetime,
            'organizer': int,
            'description': str,
            'category': object,
            'tags': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'location': 'location',
            'time': 'time',
            'organizer': 'organizer',
            'description': 'description',
            'category': 'category',
            'tags': 'tags'
        }
        self._name = name
        self._location = location
        self._time = time
        self._organizer = organizer
        self._description = description
        self._category = category
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Event of this Event.  # noqa: E501
        :rtype: Event
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Event.


        :return: The name of this Event.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Event.


        :param name: The name of this Event.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def location(self) -> str:
        """Gets the location of this Event.


        :return: The location of this Event.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """Sets the location of this Event.


        :param location: The location of this Event.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def time(self) -> datetime:
        """Gets the time of this Event.


        :return: The time of this Event.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time: datetime):
        """Sets the time of this Event.


        :param time: The time of this Event.
        :type time: datetime
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def organizer(self) -> int:
        """Gets the organizer of this Event.


        :return: The organizer of this Event.
        :rtype: int
        """
        return self._organizer

    @organizer.setter
    def organizer(self, organizer: int):
        """Sets the organizer of this Event.


        :param organizer: The organizer of this Event.
        :type organizer: int
        """
        if organizer is None:
            raise ValueError("Invalid value for `organizer`, must not be `None`")  # noqa: E501

        self._organizer = organizer

    @property
    def description(self) -> str:
        """Gets the description of this Event.


        :return: The description of this Event.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Event.


        :param description: The description of this Event.
        :type description: str
        """

        self._description = description

    @property
    def category(self) -> object:
        """Gets the category of this Event.


        :return: The category of this Event.
        :rtype: object
        """
        return self._category

    @category.setter
    def category(self, category: object):
        """Sets the category of this Event.


        :param category: The category of this Event.
        :type category: object
        """

        self._category = category

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this Event.


        :return: The tags of this Event.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this Event.


        :param tags: The tags of this Event.
        :type tags: List[str]
        """

        self._tags = tags
